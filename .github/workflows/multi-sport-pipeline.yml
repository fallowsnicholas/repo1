# .github/workflows/multi-sport-pipeline.yml - Fixed version
name: Multi-Sport Pipeline

on:
  # Remote triggering via GitHub API (from Dash app)
  repository_dispatch:
    types: 
      - full-pipeline
      - steps-1-5-data-only
      - steps-6-7-parlays-only
  
  # Manual triggering via GitHub UI
  workflow_dispatch:
    inputs:
      sport:
        description: 'Which sport to run'
        required: true
        default: 'MLB'
        type: choice
        options:
          - MLB
          - NFL
          - WNBA
      
      step:
        description: 'Which step(s) to run'
        required: true
        default: 'steps-1-5-data-only'
        type: choice
        options:
          - full-pipeline
          - steps-1-5-data-only
          - steps-6-7-parlays-only
      
      days_offset:
        description: 'Days offset (0=today, 1=tomorrow, -1=yesterday)'
        required: false
        default: '0'
        type: string

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Determine Sport and Pipeline
      id: config
      run: |
        # Determine sport based on trigger type
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          SPORT="${{ github.event.client_payload.sport }}"
          PIPELINE="${{ github.event.action }}"
          TRIGGERED_BY="${{ github.event.client_payload.triggered_by }}"
          echo "Sport: $SPORT (from repository_dispatch)"
          echo "Pipeline: $PIPELINE (from event.action)"
          echo "Triggered by: $TRIGGERED_BY"
        else
          SPORT="${{ github.event.inputs.sport }}"
          PIPELINE="${{ github.event.inputs.step }}"
          echo "Sport: $SPORT (from manual input)"
          echo "Pipeline: $PIPELINE (from manual input)"
        fi
        
        # Set as output for other steps
        echo "sport=$SPORT" >> $GITHUB_OUTPUT
        echo "pipeline=$PIPELINE" >> $GITHUB_OUTPUT
    
    - name: Display Configuration
      run: |
        echo "üèà Running pipeline for: ${{ steps.config.outputs.sport }}"
        echo "üéØ Pipeline: ${{ steps.config.outputs.pipeline }}"
        echo "üì° Triggered via: ${{ github.event_name }}"
    
    # STEP 1: Fetch Matchups
    - name: "Step 1: Fetch Matchups"
      if: |
        steps.config.outputs.pipeline == 'full-pipeline' || 
        steps.config.outputs.pipeline == 'steps-1-5-data-only'
      env:
        GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
        DAYS_OFFSET: ${{ github.event.inputs.days_offset || '0' }}
      run: |
        echo "üéØ Step 1: Fetching ${{ steps.config.outputs.sport }} Matchups"
        python fetch_matchups.py --sport ${{ steps.config.outputs.sport }}
        echo "‚úÖ Step 1 complete"
    
    # STEP 2: Fetch Odds
    - name: "Step 2: Fetch Odds API Data"
      if: |
        steps.config.outputs.pipeline == 'full-pipeline' || 
        steps.config.outputs.pipeline == 'steps-1-5-data-only'
      env:
        ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
      run: |
        echo "üéØ Step 2: Fetching ${{ steps.config.outputs.sport }} Odds"
        python fetch_odds_data.py --sport ${{ steps.config.outputs.sport }}
        echo "‚úÖ Step 2 complete"
    
    # STEP 3: Fetch and Process Splash Sports Data
    - name: "Step 3: Fetch and Process Splash Sports Data"
      if: |
        steps.config.outputs.pipeline == 'full-pipeline' || 
        steps.config.outputs.pipeline == 'steps-1-5-data-only'
      env:
        SCRAPERAPI_KEY: ${{ secrets.SCRAPERAPI_KEY }}
        SCRAPFLY_KEY: ${{ secrets.SCRAPFLY_KEY }}
        ZENROWS_KEY: ${{ secrets.ZENROWS_KEY }}
        GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
      run: |
        echo "üéØ Step 3: Fetching Splash Sports Data for ${{ steps.config.outputs.sport }}"
        python fetch_splash_json.py --sport ${{ steps.config.outputs.sport }}
        python process_splash_data.py --sport ${{ steps.config.outputs.sport }}
        echo "‚úÖ Step 3 complete"
    
    # STEP 4: Match Lines
    - name: "Step 4: Match Splash to Odds Lines"
      if: |
        steps.config.outputs.pipeline == 'full-pipeline' || 
        steps.config.outputs.pipeline == 'steps-1-5-data-only'
      env:
        GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
      run: |
        echo "üéØ Step 4: Matching Lines for ${{ steps.config.outputs.sport }}"
        python match_lines.py --sport ${{ steps.config.outputs.sport }}
        echo "‚úÖ Step 4 complete"
    
    # STEP 5: Calculate EV
    - name: "Step 5: Calculate Expected Values"
      if: |
        steps.config.outputs.pipeline == 'full-pipeline' || 
        steps.config.outputs.pipeline == 'steps-1-5-data-only'
      env:
        GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
      run: |
        echo "üéØ Step 5: Calculating EV for ${{ steps.config.outputs.sport }}"
        python calculate_ev.py --sport ${{ steps.config.outputs.sport }}
        echo "‚úÖ Step 5 complete"
    
    # STEP 6: Find Anchors (MLB only)
    - name: "Step 6: Find Anchors"
      if: |
        (steps.config.outputs.pipeline == 'full-pipeline' || 
         steps.config.outputs.pipeline == 'steps-6-7-parlays-only') &&
        steps.config.outputs.sport == 'MLB'
      env:
        GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
      run: |
        echo "üéØ Step 6: Finding Anchors for ${{ steps.config.outputs.sport }}"
        python find_pitcher_anchors.py --sport ${{ steps.config.outputs.sport }}
        echo "‚úÖ Step 6 complete"
    
    # STEP 7: Build Parlays (MLB only)
    - name: "Step 7: Build Correlation Parlays"
      if: |
        (steps.config.outputs.pipeline == 'full-pipeline' || 
         steps.config.outputs.pipeline == 'steps-6-7-parlays-only') &&
        steps.config.outputs.sport == 'MLB'
      env:
        GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
      run: |
        echo "üéØ Step 7: Building Parlays for ${{ steps.config.outputs.sport }}"
        python build_parlays.py --sport ${{ steps.config.outputs.sport }}
        echo "‚úÖ Step 7 complete"
    
    # Pipeline Summary
    - name: "Pipeline Summary"
      if: always()
      run: |
        echo "üéâ PIPELINE COMPLETE!"
        echo "Sport: ${{ steps.config.outputs.sport }}"
        echo "Pipeline: ${{ steps.config.outputs.pipeline }}"
        echo "Triggered via: ${{ github.event_name }}"
        echo ""
        echo "üìä Check Google Sheets for results:"
        echo "   Spreadsheet: ${{ steps.config.outputs.sport }}_Splash_Data"
